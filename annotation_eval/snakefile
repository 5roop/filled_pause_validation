from pathlib import Path
import polars as pl

available_anns = sorted(list(Path("anns").glob("**/*.ann.eaf")))
expected_inferred = map(
    lambda p: p.with_suffix("").with_suffix(".jsonl").name,
    available_anns
)
expected_inferred = sorted(list(set(list(expected_inferred))))


rule find_annotation_files:
    conda: "transformers"
    input: available_anns
    output:
        files_df="files.jsonl",
    script:
        "scripts/produce_files.py"
rule infer_on_one:
    output: "y_pred/{file}.jsonl"
    conda:"transformers"
    resources:
        gpu_limit = 1
    script: "scripts/infer_on_one.py"

rule gather_inferred:
    input: expand("y_pred/{file}", file=expected_inferred)
    output: "inferred.jsonl"
    shell:
        "cat {input} > {output[0]}"

rule extract_data_from_files:
    conda: "transformers"
    input: rules.find_annotation_files.output.files_df
    output: "annotations.jsonl"
    script: "scripts/read_anns.py"

rule join_annotations_and_predictions:
    conda: "transformers"
    input:
        ann=rules.extract_data_from_files.output[0],
        inferred = rules.gather_inferred.output[0]
    output: "master.jsonl"
    script:
        "scripts/join_annotations_and_predictions.py"

rule prep_single_textgrid:
    conda: "transformers"
    input:
        master = rules.join_annotations_and_predictions.output[0]
    output:
        tg = "TG/{lang}/{file}/{file}.TextGrid",
        wav = "TG/{lang}/{file}/{file}.wav",
    script: "scripts/prep_single_textgrids.py"

rule gather_textgrids:
    input: sorted(list(set([f"""TG/{i.parent.parent.name}/{i.with_suffix("").with_suffix("").name}/{i.with_suffix("").with_suffix(".TextGrid").name}""" for i in available_anns])))
    output: "tg_prepared"
    shell: "touch {output}"


rule report:
    conda: "transformers"
    input: rules.join_annotations_and_predictions.output[0], rules.gather_textgrids.output[0]
    output:
        report="report.md",
        metricsplot="images/metrics.png",
        genderplot="images/gender.png",
        samples="samples.jsonl",
    script: "scripts/report.py"

rule make_samples:
    conda: "transformers"
    input: rules.report.output.samples
    output: "eaf_samples_prepared"
    script: "scripts/make_samples.py"

rule zip:
    input: directory("EAF_samples/{what}/")
    output: "{what}.zip"
    shell:
        "cd EAF_samples; /home/peterr/mambaforge/envs/transformers/bin/zip -r ../{output}  {wildcards.what}/"

rule gather_samples:
    default_target: True
    input: expand("{what}.zip", what=["HR", "RS", "CZ", "PL"])